# -*- coding: utf-8 -*-
"""Train-Stock-RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-D9Ix34Obsk3aAnQdRzD5__y4yHIkO5

Set up data
"""

import numpy as np
import pandas as pd

NUMBARS = 5

dataset_train = pd.read_csv('Dataset.csv', sep=r'\s*,\s*')
training_set = dataset_train.iloc[:,0:1].values
dataset_train.head()

print(training_set.shape)
print(type(training_set))

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0,1))
training_set_scaled = sc.fit_transform(training_set)

X_train = []
y_train = []
for i in range(10, 2000):
  X_train.append(training_set_scaled[i-10:i,0])
  y_train.append(training_set_scaled[i,0])
X_train, y_train = np.array(X_train), np.array(y_train)

print(X_train.shape)
print(y_train.shape)
print(X_train.shape[0])
print(X_train.shape[1])

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
print(X_train.shape)

"""Build Neural Network"""

import keras
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense

model = Sequential()

model.add(LSTM(units=50,return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=50,return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50,return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50,))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.compile(optimizer='adam', loss= 'mean_squared_error')

model.fit(X_train,y_train,epochs=100, batch_size=32)

"""Test the Results"""

dataset_test = pd.read_csv('ZION5Min.csv', sep=r'\s*,\s*')
real_stock_price = dataset_test.iloc[:,0:1].values

dataset_total = dataset_test['Open']
dataset_total.shape
inputs = dataset_total[:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(10, 1000):
  X_test.append(inputs[i-10:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],  1))

print(X_test.shape)

predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

import matplotlib.pyplot as plt
plt.plot(real_stock_price, color = 'black', label = 'AMD Stock Price')
plt.plot(predicted_stock_price, color = 'green', label = 'AMD Prediction')
plt.title('AMD Prediction')
plt.xlabel('Time')
plt.ylabel('AMD Stock Price')
plt.legend()
plt.show()

model.save('Trade-Model')

