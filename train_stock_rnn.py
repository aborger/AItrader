# -*- coding: utf-8 -*-
"""Train-Stock-RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-D9Ix34Obsk3aAnQdRzD5__y4yHIkO5

Set up data
"""

import numpy as np
import pandas as pd

NUMBARS = 5

dataset_train = pd.read_csv('Dataset.csv', sep=r'\s*,\s*')
training_set = dataset_train.to_numpy()
dataset_train.head()

print(training_set.shape)
print(type(training_set))

# Normalize data
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0,1))
training_set_scaled = sc.fit_transform(training_set)

training_set_scaled.shape

X_train = []
y_train = []
for i in range(10, 1000):
  X_train.append(training_set_scaled[i-10:i])
  y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

print(X_train.shape)
print(y_train.shape)
print(X_train.shape[0])
print(X_train.shape[1])

"""Build Neural Network"""

import keras
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Flatten

model = Sequential()

model.add(LSTM(units=50,return_sequences=True, input_shape=(X_train.shape[1], 5)))
model.add(Dropout(0.2))

model.add(LSTM(units=50,return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50,return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50,))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.summary()
model.compile(optimizer='adam', loss= 'mean_squared_error')

model.fit(X_train,y_train,epochs=100, batch_size=32)

"""Test the Results"""

# Read in test dataset
dataset_test = pd.read_csv('ZION5Min.csv', sep=r'\s*,\s*')
real_stock_price = dataset_test.to_numpy()

# Reshape data
inputs = sc.transform(dataset_test[:].values)
X_test = []
for i in range(10, 1000):
  X_test.append(inputs[i-10:i])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],  5))

# Predict next prices
predicted_stock_price = model.predict(X_test)

# Add 4 columns of 0 onto predictions so it can be fed back through sc
shaped_predictions = np.empty(shape = (990, 5))
for row in range(0, 990):
  shaped_predictions[row, 0] = predicted_stock_price[row, 0]
  for col in range (1, 5):
    shaped_predictions[row, col] = 0
# un-Normalize data
predicted_stock_price = sc.inverse_transform(shaped_predictions)

# Graph results
import matplotlib.pyplot as plt
plt.plot(real_stock_price[:,0], color = 'black', label = 'AMD Stock Price')
plt.plot(predicted_stock_price[:,0], color = 'green', label = 'AMD Prediction')
plt.title('AMD Prediction')
plt.xlabel('Time')
plt.ylabel('AMD Stock Price')
plt.legend()
plt.show()

model.save('Trade-Model')

